    ______________________________________
   |______________________________________|
   //                                   //|
  //        Plan for Play State        // /
 //                                   // /
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~// /
|_____________________________________|/

Main game play

Data:

	pointer to i_data received from serve state (read write access needed)

	pointer to s_data received from serve state (read write access needed)

Enter:

Update:

	Update position of the s_data -> ball

	left        -> move s_data -> paddle towards left

	right       -> move s_data -> paddle towards right

	Detect if the s_data -> ball collids with a s_data -> brick or s_data -> paddle, do necessary things

		For s_data -> brick destroy the s_data -> brick, update the s_data -> current_level_score, alter
		direction s_data -> ball

		For s_data -> paddle change the speed of the s_data -> ball

	If s_data -> ball goes below the screen
	
		reduce i_data -> health, go to        -> serve State

		if i_data -> health is already 0
		
			destroy s_data -> bricks
		
			total_score = (s_data -> current_level_score + i_data -> score_till_last_level)

			is_highest_score = (total_score > i_data -> highest_score)

			// reset i_data

			i_data -> score_till_last_level = 0;

			i_data -> health = Max_health

			i_data -> level = 0

			goto                -> defeat state, it receives, "total_score" and "is_highest_score"

	If all bricks are destroyed
	
		destroy s_data -> bricks
		
		total_score = (s_data -> current_level_score + i_data -> score_till_last_level)

		is_highest_score = (total_score > i_data -> highest_score)

		// update i_data
		
		add s_data -> current_level_score to i_data -> score_till_last_level

		i_data -> health += 1

		i_data -> level += 1
		
		go to                -> victory state, it receives, "total_score" and "is_highest_score"

	Esc/P       -> Serve State

Render:

	Render
		s_data -> ball,
		s_data -> paddle,
		s_data -> bricks,
		(s_data -> current_level_score + i_data -> score_till_last_level) as score_till_last_level,
		hearts according to i_data -> health
		i_data -> level

Exit:

	
