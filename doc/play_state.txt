    ______________________________________
   |______________________________________|
   //                                   //|
  //        Plan for Play State        // /
 //                                   // /
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~// /
|_____________________________________|/

Main game play

Data:

	pointer to i_data received from serve state (read write access needed)

	pointer to s_data received from serve state (read write access needed)

Enter:

Update:

	Update s_data -> explo, the explosive particle system

	Update position of the s_data -> ball

	left        -> move s_data -> paddle towards left

	right       -> move s_data -> paddle towards right

	Detect if the s_data -> ball collids with a s_data -> bricks or s_data -> paddle, do necessary things

		For s_data -> bricks destroy the brick, create a new explosion with s_data -> explo, update the
		s_data -> current_level_score, alter .direction s_data -> ball

		For s_data -> paddle change the speed of the s_data -> ball

	If s_data -> ball goes below the screen "before" all the bricks are finished
	
		reduce i_data -> health, go to        -> serve State

		if i_data -> health is already 0

			// defeat
		
			destroy s_data -> bricks

			// prepare state data

			main_message = "GAME OVER"

			next_button_text = "NEW GAME"
		
			score = (s_data -> current_level_score + i_data -> score_till_last_level)

			if(score > i_data -> highest_score)

				complimentary_message = "NEW RECORD"

			else

				complimentary_message = "HIGHEST: {i_data -> highest_score}"

			// reset i_data

			if(score > i_data -> highest_score)

				i_data -> highest_score = score

			i_data -> score_till_last_level = 0

			i_data -> health = Max_health

			i_data -> level = 0

			go to                -> message state, it receives, main_message, complementary_message, next_button_text, score

	If all bricks are destroyed and all the remaining explosions are over

		// victory
	
		destroy s_data -> bricks

		// update i_data

		i_data -> score_till_last_level += s_data -> current_level_score

		i_data -> health += 1

		i_data -> level += 1

		// prepare data to send to message state

		main_message = "LEVEL UP!"

		complimentary_message = "HEALTH++"

		next_button_text = "LEVEL {i_data -> level}"

		score = i_data -> score_till_last_level
		
		go to                 -> message state, it receives, main_message, complementary_message, next_button_text, score

	Esc/P       -> Serve State

Render:

	Render
		s_data -> ball,
		s_data -> paddle,
		s_data -> bricks,
		s_data -> explo,
		(s_data -> current_level_score + i_data -> score_till_last_level) as score_till_last_level,
		hearts according to i_data -> health
		i_data -> level

Exit:

	
